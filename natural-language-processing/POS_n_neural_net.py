# -*- coding: utf-8 -*-
"""lista6-pln.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19CTzeaFmTXOUjx_JFqq4yGVYfPwB8CBB

**Alunos**: João Pedro Nunes e Yanka Ribeiro
"""

import warnings
from collections import Counter
import re, string
import pandas as pd
import spacy
import numpy as np
import seaborn as sns
!pip install spacy
!python -m spacy download en_core_web_sm
nlp = spacy.load('en_core_web_sm')
sns.set_theme(style='whitegrid')
import tensorflow as tf
from tensorflow import keras 
from keras import layers 
from keras.preprocessing.text import Tokenizer 
from keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
plt.style.use('ggplot')
warnings.filterwarnings('ignore')

texts = list(pd.read_csv('https://gist.githubusercontent.com/yrribeiro/0ec3c900b848f0f7bab64bbcc16274e4/raw/d8c268bf1b7b51e217213e40509b4c229c656787/texts.csv',
                      delimiter=',')['text'])
# texts

"""# **Questão 1: *Resolva novamente a segunda questão da 3a lista usando pelo menos duas arquiteturas de redes neurais que utilizem camadas Embedding, convolucionais e LSTM. Compare com os resultados obtidos anteriormente nas lista 3 e 5.***"""



"""# **Questão 2: *Usando sua base de textos:***

# **a)** *Treine uma rede LSTM para gerar texto, que receba uma ou mais palavras de uma frase como entrada. O treinamento deve ser realizado considerando um conjunto supervisionado que gera a próxima palavra de uma sequência de tamanho 4, usando subsequências de sua base.*
"""

text_words = []
for i in texts:
  text_words.append(i.split(' '))

def lista_simples(lista):
    if isinstance(lista, list):
        return [sub_elem for elem in lista for sub_elem in lista_simples(elem)]
    else:
        return [lista]


text_words = lista_simples(text_words)

print('Quantidade Total de Palavras: ', len(text_words))

vocab_size = 500

tokenizer = Tokenizer(num_words=vocab_size, oov_token='<OOV>', filters='[^\x00-\x7f]')

tokenizer.fit_on_texts(text_words)

tokens = tokenizer.texts_to_sequences(text_words)
tokens = [int(t[0]) for t in tokens] # lista para inteiros

step = 1 # distancia a cada fatia 
sentences = [] # frases X
next_words = [] # palavras Y
seq_len = 9 # número de tokens por frase
for i in range(0, len(tokens) - seq_len, step):
    sentences.append(tokens[i: i + seq_len])
    next_words.append(tokens[i + seq_len])
   
# mostra shape atual
train_x = np.array(sentences) # pega as sentenças
train_y = np.array(next_words) # pega as palavras seguintes
# codificando para one-hot
train_x_onehot = to_categorical(train_x, num_classes=vocab_size)
train_y_onehot = to_categorical(train_y, num_classes=vocab_size)

model = keras.Sequential([
    layers.LSTM(64, input_shape=(seq_len, vocab_size), return_sequences=False,),
    layers.Dense(vocab_size, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

train_history = model.fit(train_x_onehot, train_y_onehot, validation_split=0.2,
                    epochs=15, batch_size=256)

seed_text = ['reach highest level devastation'] # frase inicial
seed_tokens = tokenizer.texts_to_sequences(seed_text)[0] # substitui palavras por tokens

# preenche sequencia com zeros para ter o comprimento adequado pra rede
tokens_x = pad_sequences([seed_tokens], maxlen=seq_len, )
tokens_x = to_categorical(tokens_x, num_classes=vocab_size) # one hot
pred_y = model.predict(tokens_x) # preve probabilidades para a proxima palavra

def sample_word(pred_y, temperature=1.0):
    pred_y = pred_y / temperature # 'força' das probabilidades
    pred_token = tf.random.categorical(pred_y, 1).numpy()
    return pred_token # token de saída

next_token = sample_word(pred_y)
# realiza a inversão de token para palavra
next_word = tokenizer.sequences_to_texts(next_token)
print('Proximo token: ', next_token, '-->', next_word)

"""# **b)** *Após o treinamento, exiba pelo menos 5 exemplos de textos dados de entrada, e do texto gerado em seguida pela rede treinada. Para cada exemplo, gere pelo menos 10 palavras consecutivamente.*"""

def sample_word(pred_y, temperature=1.0):
    pred_y = pred_y / temperature # 'força' das probabilidades
    pred_token = tf.random.categorical(pred_y, 1).numpy()
    return pred_token # token de saída
seed_text = ['true destroy unholy coalition',
             'there amazing wwii story', 
             'lightning hotter surface sun', 
             'mom setting bathroom curfew', 
             'retweet second receive goodnews'] # frase inicial
for rep in range(5):
  for rep2 in range(10):
    seed_tokens = tokenizer.texts_to_sequences(seed_text[rep])[0] # substitui palavras por tokens

# preenche sequencia com zeros para ter o comprimento adequado pra rede
    tokens_x = pad_sequences([seed_tokens], maxlen=seq_len, )
    tokens_x = to_categorical(tokens_x, num_classes=vocab_size) # one hot
    pred_y = model.predict(tokens_x) # preve probabilidades para a proxima palavra

    next_token = sample_word(pred_y)
# realiza a inversão de token para palavra
    next_word = tokenizer.sequences_to_texts(next_token)
    aux = seed_text[rep]
    seed_text[rep] += ' ' + next_word[0];
  print(seed_text[rep])

"""# **c)** *Faça o mesmo usando Cadeias de Markov com bi-grams (usando apenas 1 palavra para tentar prever a seguinte). Compare os resultados com os da LSTM.*"""



"""# **Questão 3: *Usando sua base de textos e a biblioteca spaCy, realize as seguintes tarefas:***

# **a)** *Extraia as etiquetas gramaticais (POS) de cada token do seu textos.*
"""

all_tag = []
for phrase in texts:
  print(f'~ frase: [{phrase}]')
  doc = nlp(phrase)
  print('   TAGS')
  for token in doc:
      print(token.pos_)
      all_tag.append(token.pos_)
  print('')

"""# **b)** *Calcule e plote um gráfico com as frequências de cada tipo gramatical.*"""

def list2dict(lst):
    dct = {t[0]: t[1] for t in lst}
    return dct

count = Counter(all_tag).most_common()
frequency_df = pd.DataFrame(list2dict(count), index=['Quantidade'])
ax = sns.barplot(
    data=frequency_df,
    orient='h',
    )
ax.figure.set_size_inches(16,9)

"""# **c)** *Extraia entidades do tipo pessoa e lugar dos seus textos.*"""

target_tags = ['PERSON', 'GPE']
all_ents = []
for phrase in texts:
  doc = nlp(phrase)
  if doc.ents:
    for ent in doc.ents:
      if ent.label_ in target_tags:
        all_ents.append(ent)
        print(f'[{ent.text}] = {ent.label_}')

"""# **d)** *Identifique e liste as pessoas mais frequentes nos seus textos. Você só deve contar cada entidade 1 vez por documento.*"""

only_person = []
target_tags = ['PERSON']
for ent in all_ents:
  if ent.label_ in target_tags:
    only_person.append(ent)

print(Counter(only_person))

"""NOTA: Não houve uma pessoa proeminente, todos os tokens que foram rotulados como 'PERSON' apareceram 1 vez

# **Questão 4: *Estude o tutorial Character-level recurrent sequence-to-sequence model disponível em https://keras.io/examples/nlp/lstm_seq2seq/.***

# **a)** *Treine um outro modelo de tradução entre línguas distintas e exiba 5 exemplos de tradução de frases curtas. Você pode encontrar conjuntos de treinamento em http://www.manythings.org/anki/.*
"""

!!curl -O http://www.manythings.org/anki/fin-eng.zip
!!unzip fin-eng.zip

BATCH_SIZE = 64
EPOCHS = 100
LATENT_DIM = 256
NUM_SAMPLES = 10000
data_path = 'fin.txt'

input_texts = []
target_texts = []
input_characters = set()
target_characters = set()

with open(data_path, 'r', encoding='utf-8') as f:
    lines = f.read().split('\n')
for line in lines[: min(NUM_SAMPLES, len(lines) - 1)]:
    input_text, target_text, _ = line.split('\t')
    target_text = '\t' + target_text + '\n'
    input_texts.append(input_text)
    target_texts.append(target_text)
    for char in input_text:
        if char not in input_characters:
            input_characters.add(char)
    for char in target_text:
        if char not in target_characters:
            target_characters.add(char)

input_characters = sorted(list(input_characters))
target_characters = sorted(list(target_characters))
num_encoder_tokens = len(input_characters)
num_decoder_tokens = len(target_characters)
max_encoder_seq_length = max([len(txt) for txt in input_texts])
max_decoder_seq_length = max([len(txt) for txt in target_texts])

print('~ número de amostras:', len(input_texts))
print('~ número de tokens distintos (entrada):', num_encoder_tokens)
print('~ número de tokens distintos (saída):', num_decoder_tokens)
print('~ tamanho máximo de entrada:', max_encoder_seq_length)
print('~ tamanho máximo de saída:', max_decoder_seq_length)

input_token_index = dict([(char, i) for i, char in enumerate(input_characters)])
target_token_index = dict([(char, i) for i, char in enumerate(target_characters)])

encoder_input_data = np.zeros(
    (len(input_texts), max_encoder_seq_length, num_encoder_tokens), dtype='float32'
)
decoder_input_data = np.zeros(
    (len(input_texts), max_decoder_seq_length, num_decoder_tokens), dtype='float32'
)
decoder_target_data = np.zeros(
    (len(input_texts), max_decoder_seq_length, num_decoder_tokens), dtype='float32'
)

for i, (input_text, target_text) in enumerate(zip(input_texts, target_texts)):
    for t, char in enumerate(input_text):
        encoder_input_data[i, t, input_token_index[char]] = 1.0
    encoder_input_data[i, t + 1 :, input_token_index[' ']] = 1.0
    for t, char in enumerate(target_text):
        decoder_input_data[i, t, target_token_index[char]] = 1.0
        if t > 0:
            decoder_target_data[i, t - 1, target_token_index[char]] = 1.0
    decoder_input_data[i, t + 1 :, target_token_index[' ']] = 1.0
    decoder_target_data[i, t:, target_token_index[' ']] = 1.0

encoder_inputs = keras.Input(shape=(None, num_encoder_tokens))
encoder = keras.layers.LSTM(LATENT_DIM, return_state=True)
encoder_outputs, state_h, state_c = encoder(encoder_inputs)
encoder_states = [state_h, state_c]
decoder_inputs = keras.Input(shape=(None, num_decoder_tokens))

decoder_lstm = keras.layers.LSTM(LATENT_DIM, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)
decoder_dense = keras.layers.Dense(num_decoder_tokens, activation='softmax')
decoder_outputs = decoder_dense(decoder_outputs)

model = keras.Model([encoder_inputs, decoder_inputs], decoder_outputs)

model.compile(
    optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'], run_eagerly=True
)
model.fit(
    [encoder_input_data, decoder_input_data],
    decoder_target_data,
    batch_size=BATCH_SIZE,
    epochs=EPOCHS,
    validation_split=0.2,
)
# Save model
model.save('s2s-fin2eng')

model = keras.models.load_model('s2s-fin2eng')

encoder_inputs = model.input[0]
encoder_outputs, state_h_enc, state_c_enc = model.layers[2].output
encoder_states = [state_h_enc, state_c_enc]
encoder_model = keras.Model(encoder_inputs, encoder_states)

decoder_inputs = model.input[1]
decoder_state_input_h = keras.Input(shape=(LATENT_DIM,))
decoder_state_input_c = keras.Input(shape=(LATENT_DIM,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
decoder_lstm = model.layers[3]
decoder_outputs, state_h_dec, state_c_dec = decoder_lstm(
    decoder_inputs, initial_state=decoder_states_inputs
)
decoder_states = [state_h_dec, state_c_dec]
decoder_dense = model.layers[4]
decoder_outputs = decoder_dense(decoder_outputs)
decoder_model = keras.Model(
    [decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states
)
reverse_input_char_index = dict((i, char) for char, i in input_token_index.items())
reverse_target_char_index = dict((i, char) for char, i in target_token_index.items())


def decode_sequence(input_seq):
    states_value = encoder_model.predict(input_seq)
    target_seq = np.zeros((1, 1, num_decoder_tokens))
    target_seq[0, 0, target_token_index['\t']] = 1.0
    stop_condition = False
    decoded_sentence = ''

    while not stop_condition:
        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_char = reverse_target_char_index[sampled_token_index]
        decoded_sentence += sampled_char
        if sampled_char == '\n' or len(decoded_sentence) > max_decoder_seq_length:
            stop_condition = True
        target_seq = np.zeros((1, 1, num_decoder_tokens))
        target_seq[0, 0, sampled_token_index] = 1.0
        states_value = [h, c]
    return decoded_sentence

seq_idx = [9014, 8414, 9436, 9624, 8679]
for seq_index in seq_idx:
    input_seq = encoder_input_data[seq_index : seq_index + 1]
    decoded_sentence = decode_sequence(input_seq)
    print('~ sentença original:', input_texts[seq_index])
    print('~ tradução:', decoded_sentence)

"""# **b)** *BONUS: Adapte o código para realizar tradução com uma rede word-level.*"""

