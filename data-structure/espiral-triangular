#include <stdio.h>
#include <stdlib.h>

int y_function (int n);
int x_function (int n, int y);

int main (){
    int n, res_y;
    
    printf("-- Digite N: ");
    scanf("%d", &n);
    if (n==0){
        printf("\n=== (0,0) ===\n");
    }else if (n==1){
        printf("\n=== (1,0) ===\n");
    }else{
        res_y = y_function(n);
        printf("\n=== (%d, %d) ===\n", x_function(n, res_y), res_y);
    }
    return 0;
}

int x_function (int n, int y){
    int x, subtra;
    subtra = n-abs(y);
    if (n%3==0){
        subtra*=-1;
    }else if (subtra%2!=0 && y>0){
        return y;
    }
    return subtra;
}

int y_function (int n){
    int i, y, num=1, minus=0;
    for (i=2; i<=n; i++){
        y = num;
        if (minus==2){
            minus=0;
            num = num*-1+1;
        }else if (minus==1){
            minus++;
        }else{
            num*=-1;
            minus++;
        }
    }
    return y;
}

PADRÕES:
- n=0 ponto de origem
- n=1 ponto (1,0)
- começa a calcular a partir de n=2
- faz o y primeiro, para enviar pro x
	- começa com 1 positivo e segue o mesmo número duas vezes mas sendo negativo
	- guarda a ocorrência de números negativos na variável minus
	- caso minus seja 2, significa que já foi os dois negativos agora ele reseta a variável menos, converte o y para positivo e soma 1
	- faz isso até chegar no n
- guarda o retorno de y em uma variável pois utiliza novamente na função de x
- padrões de x
	- x é invertido, será dois positivos e um negativo
	- como n=0 e n=1 foram tratados na main, n=2 inicia como o último positivo, logo, n=3 será negativo e assim por diante
	- o valor de x será o índice, ou o número digitado pelo usuário, menos módulo de y
	- x será negativo caso o índice seja um múltiplo de 3. 	(progressão aritmética, primeiro negativo ocorre em n=3, depois em n=6, de novo em n=9...)
	- caso especial de x ser igual a y: quando a subtração é um número ímpar e o y é positivo, x será igual a y, neste caso basta repetir o y 
